* 레디스의 자료구조
    * string
        string은 레디스에서 데이터를 저장할 수 있는 가장 간단한 자료 구조이다 string에는
        최대 512mb의 문자열 데이터를 저장할 수 있으며 이진 데이터를 포함하는 모든 종류의 문자열이 binary-safe하게
        처리되기 때문에 JPEG 이미지와 같은 바이트 값, HTTP 응답값 등의 다양한 데이터를 저장하는 것도 가능

        string은 키와 실제 저장되는 아이템이 일대일로 연결되는 유일한 자료구조

        > SET hello world // hello라는 키에 world라는 벨류 저장
        > GET hello // "world"

        SET과 함께 NX 옵션을 사용하면 지정한 키가 없을 때에만 새로운 키를 저장
        > SET hello newval NX
        (nil)

        XX 옵션을 사용하면 키가 있을 때에만 새로운 값으로 덮어 쓰며 새로운 키를 생성하진 않도록 동작
        > SET hello newval XX
        OK

        > GET hello
        "newval"

        -INCR, INCRBY와 같은 커맨드를 이용하면 string 자료구조에 저장된 숫자를 원자적으로 조작할 수 있다
        > SET counter 100
        OK

        > INCR counter
        (integer) 101

        > INCR counter
        (integer) 102

        > INCR counter  50
        (integer) 152

        -DECR, DECRBY 커맨드는 동일한 방식으로 데이터를 감소시키는 커맨드이다

        커맨드가 원자적이라는 것은 같은 키에 접근하는 여러 클라이언트가 경쟁 상태를 발생시킬 일이 없음을 의미한다.
        커맨드를 수행하는 타이밍이나 순서에 따라 이미 실행한 커맨드가 무시되거나 같은 커맨드가 중복 처리돼 수행 겨로가가 달라지는
        일은 발생하지 않음을 뜻한다
            ex) 클라이언트 A와 B가 동시에 10이라는 데이터를 가지고 있는 키에 INCR 커맨드를 수행하더라도 하나의 커맨드만 수행돼 11이 저장되는 상황은
            발생하지 않는다

        MSET, MGET 커맨드를 이용하면 한 번에 여러 키를 조작할 수 있다
        > MSET a 10 b 20 c 30
        OK

        > MGET a b c
        1) "10"
        2) "20"
        3) "30"

    * list
        list는 순서를 가지는 문자열의 목록이다 하나의 list에는 최대 42억여 개의 아이템을 저장할 수 있다
        일반적으로 알고 있는 다른 배열처럼 인덱스를 이용해 데이터에 직접 접근할 수도 있으며 일반적으로 list는 서비스에서 스택과 큐로서 사용된다

        LPUSH 커맨드는 list 왼쪽에 데이터를 추가하며, RPUSH 커맨드는 list의 오른쪽에 데이터를 추가한다
        LRANGE 커맨드를 이용하면 list에 들어있는 데이터를 조회할 수 있다

        > LPUSH mylist E
        (integer) 1

        > LPUSH mylist B
        (integer) 2

        > LPUSH mylist D A C B A
        (integer) 7

        > LRANGE mylist 0 -1
        1) "A"
        2) "B"
        3) "C"
        4) "A"
        5) "D"
        6) "E"
        7) "B"

        > LRANGE mylist 0 3
        1) "A"
        2) "B"
        3) "C"
        4) "A"

        LPOP 커맨드를 사용하면 list에 저장된 첫 번째 아이템을 반환하는 동시에 list에서 삭제한다
        > LPOP mylist
        "A"

        > LPOP mylist 2
        1) "B"
        2) "C"

        LTRIM 커맨드는 시작과 끝 아이템의 인덱스를 인자로 전달받아 지정한 범위에 속하지 않은 아이템은 모두 삭제하지만
        LPOP과 같이 삭제되는 아이템을 반환하지는 않는다

        > LRANGE mylist 0 -1
        1) "A"
        2) "D"
        3) "E"
        4) "B"

        > LTRIM mylist 0 1
        OK

        > LRANGE mylist 0 -1
        1) "A"
        2) "D"

        ** list의 양 끝에 데이터를 넣고 빼는 LPUSH, RPUSH, LPOP, RPOP 커맨드는 O(1)
        list의 중간 데이터에 접근할 때에는 O(n)으로 처리되며, list에 저장된 데이터가 늘어남에 따라 성능은 저하된

        > LRANGE mylist 0 -1
        1) "A"
        2) "B"
        3) "C"
        4) "A"
        5) "D"
        6) "B"
        7) "E"

        > LINSERT mylist BEFORE B E // B 앞에 E를 추가
        (integer) 8

        > LRANGE mylist 0 -1
        1) "A"
        2) "E"
        3) "B"
        4) "C"
        5) "A"
        6) "D"
        7) "B"
        8) "E"

        > LRANGE mylist 0 -1
        1) "A"
        2) "E"
        3) "B"
        4) "C"
        5) "A"
        6) "D"
        7) "B"
        8) "E"

        > LRANGE mylist 0 -1
        1) "A"
        2) "E"
        3) "B"
        4) "C"
        5) "A"
        6) "D"
        7) "B"
        8) "E"

        > LSET mylist 2 F // 인덱스 2에 F라는 데이터를 저장
        OK

        > LRANGE mylist 0 -1
        1) "A"
        2) "E"
        3) "F"
        4) "C"
        5) "A"
        6) "D"
        7) "B"
        8) "E"

        > LINDEX mylist 3 // 특정 인덱스의 데이터 조회
        "C"

    * hash
        hash는 필드-값 쌍을 가진 아이템의 집합(각 아이템마다 다른 필드를 가질 수 있으며 동적으로 다양한 필드를 추가 가능)
        레디스에서 데이터가 key-value 쌍으로 저장되는 것처럼, 하나의 hash 자료 구조 내에서 아이템은 필드-값 쌍으로 저장된다
        필드는 하나의 hash 내에서 유일하며, 필드와 값 모두 문자열 데이터로 저장된다.

        HSET 커맨드로 hash에 아이템을 저장할 수 있으며 한 번에 여러 필드 값 쌍을 저장 가능
        > HSET Product:123 Name "Happy Hacking"
        (integer) 1
        > HSET Product:123 TypeId 35
        (integer) 1
        > HSET Product:123 Version 2002
        (integer) 1
        > HSET Product:234 Name "Track Ball" TypeID 32
        (integer) 2

        HGET 커맨드로 저장된 데이터를 가져올 수 있으며 hash 자료 구조의 키와 아이템의 필드를 함께 입력해야 한다
        > HGET Product:123 TypeId
        "35"

        HMGET 커맨드를 이용하면 하나의 hash 내에서 다양한 필드의 값을 가져올 수 있다
        > hmget Product:234 Name TypeID
        1) "Track Ball"
        2) "32"

        HGETALL 커맨드를 이용하면 특정 키를 가진 hash내의 모든 필드-값 쌍을 차례로 반환
        > HGETALL Product:234
        1) "Name"
        2) "Track Ball"
        3) "TypeID"
        4) "32"

    * set
        레디스에서 set은 정렬되지 않은 문자열의 모음
        하나의 set 자료 구조 내에서 아이템은 중복해서 저장되지 않으며 교집합, 합집합, 차집합 등의 집합 연산과 관련한 커맨드를 제공하기 때문에
        객체 간의 관계를 계산하거나 유일 원소를 구해야 할 경우 사용될 수 있다

        SADD 커맨드를 사용하면 set에 아이템을 저장할 수 있으며, 한 번에 여러 개의 아이템을 저장하는 것도 가능
        > SADD myset A
        (integer) 1
        > SADD myset A A A C B D D E F F F F G
        (integer) 6
        > SMEMBERS myset
        1) "C"
        2) "B"
        3) "G"
        4) "E"
        5) "F"
        6) "A"
        7) "D"

        SADD 커맨드는 저장되는 실제 아이템 수를 반환
        SMEMBERS 커맨드는 set 자료 구조에 저장된 전체 아이템을 출력하는데 이때 데이터를 저장한 순서와 관계 없이 랜덤한 순서로 데이터가 출력되는 것을
        확인할 수 있다

        SREM 커맨드를 이용하면 set에서 원하는 데이터를 삭제할 수 있으며, SPOP 커맨드는 set 내부의 아이템 중 랜덤으로 하나의 아이템을 반환하는 동시에
        set에서 그 아이템을 삭제한다

        > SREM myset B
        (integer) 1
        > SMEMBERS myset
        1) "C"
        2) "G"
        3) "E"
        4) "F"
        5) "A"
        6) "D"

        > SPOP myset
        "D"
        > SMEMBERS myset
        1) "C"
        2) "G"
        3) "E"
        4) "F"
        5) "A"

        set에서의 합집합은 SUNION, 교집합은 SINTER, 차집합은 SDIFF 커맨드로 수행 가능
        set:111 = A, B, C, D, E
        set:222 = D, E, F, G, H

        > SINTER set:111 set:222 // 교집합
        1) "D"
        2) "E"

        > SUNION set:111 set:222 // 합집합
        1) "D"
        2) "H"
        3) "F"
        4) "C"
        5) "G"
        6) "B"
        7) "A"
        8) "E"

        > SDIFF set:111 set:222 // 차집합
        1) "B"
        2) "C"
        3) "A"


    * sorted Set
        sorted set은 스코어 값에 따른 정렬되는 고유한 문자열의 집합니다.
        모든 아이템은 스코어-값 쌍을 가지며, 저장될 때부터 스코어 값으로
        정렬돼 저장된다 같은 스코어를 가진 아이템은 데이터의 사전 순으로 정렬돼 저장된다
        데이터 중복없이 유일하게 저장되므로 set과 유사하다고 볼 수 있으며, 각 아이템은 스코어라는 데이터에 연결돼 있어 이 점은 hash와 유사하다고 생각할 수 있다
        또한 모든 아이템은 스코어 순으로 정렬돼 있어 list처럼 인덱스를 이용해 각 아이템에 접근 가능

        ** 인덱스를 이용해 아이템에 접근할 일이 많다면 list보단 sorted set 사용이 더 효율적
           list = O(n), sorted set = O(log(n))

        ZADD 커맨드를 사용하면 sorted set에 아이템을 저장할 수 있으며, 스코어-값 쌍으로 입력해야 한다
        한 번에 여러 아이템을 입력할 수 있으며, 각 아이템은 sorted set에 저장되는 동시에 스코어 값으로 정렬

        > ZADD score:220817 100 user:B
        (integer) 1
        > ZADD score:220817 150 user:A 150 user:C 200 user:F 300 user:E
        (integer) 4

        만약 저장하고자 하는 데이터가 이미 sorted set에 속해 있다면 스코어만 업데이터 되며, 업데이트된 스코어에 의해 아이템이 재정렬된다
        스코어는 배정밀도 부동소수점 숫자를 문자열로 표현한 값이어야 한다.

        * ZADD 커맨드 옵션
            - XX: 아이템이 이미 존재할 때에만 스코어를 업데이트 한다
            - NX: 아이템이 존재하지 않을 때에만 신규 삽입하며, 기존 아이템의 스코어를 업데이트하지 않는다
            - LT: 업데이트하고자 하는 스코어가 기존 아이템의 스코어보다 작을 때에만 업데이트한다 아이템이 존재하지 않을 때에는 새로운 데이터를 삽입
            - GT: 업데이트하고자 하는 스코어가 기존 아이템의 스코어보다 클 때에만 업데이트한다. 기존에 아이템이 존재하지 않을 때에는 새로운 데이터를 삽

        ZRANGE 커맨드를 사용하면 sorted set에 저장된 데이터를 조회할 수 있으며, start와 stop이라는 범위를 항상 입력해야 한다
            ZRANGE key start stop [BYSCORE | BYLEX] [REV] [LIMIT offset count] [WITHSCORES]
            - ZRANGE 커맨드는 기본적으로 인덱스를 기반으로 데이터를 조회하기 때문에 start와 stop 인자에는 검색하고자 하는 첫 번째와 마지막 인덱스를
            전달 WITHSCORE 옵션을 사용하면 데이터와 함께 스코어 값이 차례대로 출력되며, REV 옵션을 사용하면 데이터는 역순 출력
            list에서와 마찬가지로 음수 인덱스를 사용할 수 있으며, ZRANGE <key> 0 -1 커맨드는 sorted set에 저장된 모든 데이터를 조회

            > ZRANGE score:220817 1 3 WITHSCORES
            1) "user:A"
            2) "150"
            3) "user:C"
            4) "150"
            5) "user:F"
            6) "200"

            > ZRANGE score:220817 1 3 WITHSCORES REV
            1) "user:F"
            2) "200"
            3) "user:C"
            4) "150"
            5) "user:A"
            6) "150"

        ZRANGE 커맨드에 BYSCORE 옵션을 사용하면 스코어를 이용해 데이터를 조회 가능, start, stop 인자 값으로는 조회하고자 하는 최소, 최대
        스코어를 전달해야 하며 전달한 스코어를 포함한 값을 조회

        > zrange score:220817 100 300 byscore withscores
         1) "user:B"
         2) "100"
         3) "user:A"
         4) "150"
         5) "user:C"
         6) "150"
         7) "user:F"
         8) "200"
         9) "user:E"
        10) "300"

        인수로 전달하는 스코어에 ( 문자를 추가하면 해당 스코어를 포함하지 않는 값만 조회 가능
        > zrange score:220817 100 (300 byscore withscores
        1) "user:B"
        2) "100"
        3) "user:A"
        4) "150"
        5) "user:C"
        6) "150"
        7) "user:F"
        8) "200"

        인수로 전달하는 최대값 스코어에 infinity를 의미하는 -inf, +inf라는 값을 사용 가능
        > zrange score:220817 200 +inf BYSCORE WITHSCORES
        1) "user:F"
        2) "200"
        3) "user:E"
        4) "300"

        BYLEX 옵션을 사용하면 사전식 순서를 이용해 특정 아이템을 조회할 수 있다
            start, stop에는 사전 순으로 비교하기 위한 문자열을 전달해야 하며, 이때 반드시 (나 [문자를 함께
            입력해야 한다 입력한 문자열을 ㅍ함하려면 (을 포함하지 않을때에는 [ 문자를 사용
            문자열을 ASCII 바이트 값에 따라 사전식으로 정렬되기 때문에, 한글 문자열도 이 기준에 따라 정렬하거나 사전식 검색 가능
        > ZRANGE mySortedSet (b (f BYLEX
        1) "banana"
        2) "candy"
        3) "dream"
        4) "egg"

    * 비트맵
        비트맵은 독자적인 자료 구조는 아니며, string 자료 구조에 bit 연산을 수행할 수 있도록 확장한 형태다.
        string 자료 구조가 binary safe(어떤 종류의 데이터도 저장 가능 . 즉, 저장된 데이터가 텍스트 문자열이든, 이진 데이터(예: 이미지, 비디오 파일)이든 상관없이 그 데이터를 정확히
                                    그대로 저장하고 검색할 수 있다는 것을 의미)하고 최대 512mb의 값을 저장할 수 있는
        구조이기 때문에 2의 32승의 비트를 가지고 있는 비트맵 형태라고 볼수 있다

        > BITFIELD mybitmap SET u1 6 1 SET u1 10 1 SET u1 14 1
        1) (integer) 1
        2) (integer) 1
        3) (integer) 1

        > BITCOUNT mybitmap
        (integer) 4

        > SETBIT mybitmap 2 1
        (integer) 1
        > GETBIT mybitmap 2
        (integer) 1

    * Hyperloglog
        집합의 원소 개수인 카디널리티를 추정할 수 있는 자료구조다 대량데이터에서 중복되지 않은 고유한 값을 집계할때 유용하게 사용할 수 있는 데이터구조이다
        일반적으로 set과 같은 데이터 구조에서 중복을 피하기 위해 저장된 데이터를 모두 기억하고 있으며 저장되는 데이터가
        많아질수록 그만큼 많은 메모리를 사용한다. hyperLoglog는 입력되는 데이터 그 자체를 저장하지 않고 자체적인 방법으로
        데이터를 변경해 처리
        hyperLoglog 자료 구조는 저장되는 데이터 개수에 구애받지 않고 계속 일정한 메모리를 유지할 수 있으며, 중복되지 않는 유일한 원소의 개수를 계산 할 수 있다

        하나의 hyperloglog 자료 구조는 최대 12kb의 크기를 가지며 레디스에서 카디널리티 추정의 오차는 0.81%로 비교적 정확하게 데이터를 추정할 수 있다
        하나의 hyperloglog는 최대 2의 64승 개의 아이템을 저장할 수 있다

        PFADD 커맨드로 hyperloglog에 아이템을 저장할 수 있으며, PFCOUNT 커맨드로 저장된 아이템의 개수, 즉 카디널리티를 추정할 수 있

        > PFADD members 123
        (integer) 1
        127.0.0.1:6379> PFADD members 500
        (integer) 0
        127.0.0.1:6379> PFADD members 444
        (integer) 1
        127.0.0.1:6379> PFCOUNT members
        (integer) 3

    * Geospatial
        Geospatial 자료 구조는 경도, 위도 데이터 쌍의 집합으로 간편하게 지리 데이터를 저장할 수 있는 방법이다
        내부적으로 데이터는 sorted set으로 저장되며, 하나의 자료 구조 안에 키는 중복돼 저장되지 않는다

        > GEOADD travel 14.399698913595286 50.09924276349484 prague
        (integer) 1

        > GEOADD travel 127.0016985 37.5642135 seoul -122.43454762275572 37.78530362582044 SanFrancisco
        (integer) 2

        GEOADD <key> 경도 위도 member 순서로 저장되며, sorted set과 마찬가지로 XX 옵션을 사용하면 이미 아이템이 있는 경우에만
        NX 옵션을 사용하면 아이템이 없는 경우에만 데이터를 저장

        GEOPOS 커맨드를 이용하면 저장된 위치 데이터를 조회할 수 있으며, GEODIST 커맨드를 사용하면 두 아이템 사이의 거리를 반환할 수 있다

        > GEOPOS travel prague
        1) 1) "14.39969927072525024"
           2) "50.09924150927290043"
        > GEODIST travel seoul prague KM
        "8252.9957"
