
* sorted-set을 이용한 리더보드
    - 일별 리더보드를 도입하기 위해 daily-score:<날짜>를 이용해 sorted set 키를 만들고, 사용자의 스코어를 가중치로 사용해서 데이터를 입력

    ZADD daily-score:220817 28 player:286
    (integer) 1
    > ZADD daily-score:220817 400 player:234
    (integer) 1
    > ZADD daily-score:220817 45 player:101
    (integer) 1
    > ZADD daily-score:220817 357 player:24
    (integer) 1
    > ZADD daily-score:220817 199 player:143
    (integer) 1

    sorted-set은 순서없이 데이터를 저장하더라도 sorted set에는 데이터가 스코어 순으로 정렬돼 저장된다.
    ZRANGE 커맨드를 이용하면 스코어로 오름차순 정렬된 데이터를 확인할 수 있다.

    > ZRANGE daily-score:220817 0 -1 withscores
     1) "player:286"
     2) "28"
     3) "player:101"
     4) "45"
     5) "player:143"
     6) "199"
     7) "player:24"
     8) "357"
     9) "player:234"
    10) "400"

    ZRANGE는 스코어가 낮은 순서부터 출력한다. 만약 게임의 첫 화면으로 오늘의 상위 스코어 세 명의 유저만 출력하고 싶다면
    다음과 같이 ZREVRANGE 커맨드를 사용할 수 있다.

    > ZRANGE daily-score:220817 0 2 withscores
    1) "player:286"
    2) "28"
    3) "player:101"
    4) "45"
    5) "player:143"
    6) "199"

    ZREVRANGE는 sorted set에 저장된 데이터를 내림차순으로 반환하는데, 이때 0번 인덱스인 첫 번째 데이터부터 2번 인덱스인 세 번째 데이터까지
    출력하라는 커맨드를 사용했기 때문에 스코어가 가장 높은 3개의 데이터가 출력된다.

    - 데이터 업데이트
        > ZADD daily-score:220817 200 player:286
        (integer) 0
        > ZRANGE daily-score:220817 0 -1 withscores
         1) "player:101"
         2) "45"
         3) "player:143"
         4) "199"
         5) "player:286"
         6) "200"
         7) "player:24"
         8) "357"
         9) "player:234"
        10) "400"

        sorted set은 기본적으로 set이기 때문에 데이터는 중복으로 저장되지 않으며, 같은 아이템을 저장하고자 할 때 스코어가 다르면
        기존 데이터의 스코어만 신규 입력한 스코어로 업데이트된다.(순서도 재정렬)

    - 스코어 증감
        ZINCRBY 커맨드는 string에서의 INCRBY 커맨드와 비슷하게 동작하며, 아이템의 스코어를 입력한 만큼 증가시키는 커맨드다.

        > ZINCRBY daily-score:220817 100 player:24
        "457"

        > ZRANGE daily-score:220817 0 -1 withscores
         1) "player:101"
         2) "45"
         3) "player:143"
         4) "199"
         5) "player:286"
         6) "200"
         7) "player:234"
         8) "400"
         9) "player:24"
        10) "457"

    - 리더보드 합산
        ZUNIONSTORE 커맨드는 지정한 키에 연결된 각 아이템의 스코어를 합산하는 커맨드다.
        따라서 해당하는 일자의 키를 지정하기만 한다면 손쉽게 주간 리더보드 데이터를 얻을 수 있다.

        > ZUNIONSTORE weekly-score:2208-3 3 daily-score:220815 daily-score:220816 daily-score:220817
        (integer) 5
        > ZRANGE weekly-score:2208-3 0 -1 withscores
         1) "player:101"
         2) "45"
         3) "player:143"
         4) "199"
         5) "player:286"
         6) "200"
         7) "player:234"
         8) "400"
         9) "player:24"
        10) "457"

        sorted-set은 스코어가 같으면 사전순으로 정렬!!

    - 가중치 적용

    > ZUNIONSTORE weekly-score:2208-3 3 daily-score:220815 daily-score:220816 daily-score:220817 weights 1 1 2
    (integer) 5
    > ZRANGE weekly-score:2208-3 0 -1 withscores
     1) "player:101"
     2) "90"
     3) "player:143"
     4) "398"
     5) "player:286"
     6) "400"
     7) "player:234"
     8) "800"
     9) "player:24"
    10) "914"


* sorted set을 이용한 최근 검색 기록
    - 요구사항
        ㄴ 유저별로 다른 키워드 노출
        ㄴ 검색 내역은 중복 제거
        ㄴ 가장 최근 검색한 5개의 키워드만 사용자에게 노출

    sorted set은 set이기 때문에 저장될 때부터 중복을 허용하지 않으며, 스코어로 시간을 사용한다면 검색 기록으로 정렬될 수 있다.

    > ZADD search-keyword:123 20221106143501 듀로이코
    (integer) 1

    > ZADD search-keyword:123 20221106143533 sorted
    (integer) 1
    > ZRANGE search-keyword:123 0 -1 withscores
    1) "\xeb\x93\x80\xeb\xa1\x9c\xec\x9d\xb4\xec\xbd\x94"
    2) "20221106143501"
    3) "sorted"
    4) "20221106143533"

    Sorted set을 이용해 데이터를 저장하기 때문에 같은 키워드를 다시 검색했을 때에도 별다른 중복 체크를 진행하지 않아도 된다.
    각 아이템은 중복되지 않게 저장되기 때문에 같은 아이템의 데이터를 입력한다면 자동으로 스코어만 업데이트돼 재정렬된다.

    데이터는 시간 순으로 정렬되기 때문에 가장 오래된 데이터를 지우기 위해서는 데이터가 6개째 저장됐을 때 가장 오래된 데이터인 0번
    인덱스의 데이터를 삭제하면 된다. 하지만 매번 데이터를 저장할 때 아이템의 개수를 확인해야 하는 번거로움이 존재한다.

    이때 sorted set의 음수 인덱스를 사용해서 데이터를 삭제한다면 위와 같은 번거로운 작업을 줄일 수 있다.
    음수 인덱스는 아이템의 제일 마지막 값을 -1로 시작해서 역순으로 증가하는 값이다.

    데이터가 6개 저장됐을 때 가장 오래전 저장된 데이터는 일반 인덱스로 0, 음수 인덱스로 -6이 된다.
    따라서 -6번 인덱스를 삭제하는 것은 0번 인덱스를 삭제하는 것과 동일한 작업을 하는 것이 된다.

    >ZREMRANGEBYRANK search-keyword:123 -6 -6
    (integer) 0 // 0은 삭제된 키가 없다는건 1이 있다는것

* set을 이용한 태그 기능
    // 특정 게시물에 연관된 태그 저장
    > SADD post:47:tags IT REDIS DataStore
    (integer) 3
    > SADD post:22:tags IT python
    (integer) 2
    > SADD post:53:tags DataStore IT MySql
    (integer) 3

    태그 기능을 사용하는 이유 중 하나는 특정 게시물이 어떤 태그와 연관돼 있는지 확인하는 것뿐만 아니라 특정한 태그를 포함한 게시물들만 확인하기 위해서일 수 있다.

    // 특정 태그에 연관된 게시물 번호 저장
    > SADD tag:DataStore:posts 53
    (integer) 1
    > SADD tag:IT:posts 53
    (integer) 1
    > SADD tag:MySQL:posts 53
    (integer) 1

    tag를 기준으로 하는 set의 데이터를 나타낸다. SMEMBERS 커맨드를 이용하면 특정 태그를 갖고 있는 포스트를 쉽게 확인 가능
    > SMEMBERS tag:IT:posts
    1) "53"
    2) "444"

    SINTER 커맨드를 이용하면 특정 set의 교집합을 확인할 수 있다. 만약 IT와 DataStore 태그를 모두 포함하는 게시물을 확인하고 싶으면
    > SINTER tag:IT:posts tag:DataStore:posts
    1) "53"
    2) "444"


* 랜덤 데이터 추출
    레디스를 사용하면 O(1)의 시간 복잡도를 이용해 랜덤한 데이터를 추출할수 있다.
    ** RANDOMKEY
        레디스에 저장된 전체 키 중 하나를 무작위로 반환한다.
    ** HRANDFIELD, SRANDMEMBER, ZRANDMEMBER
        각각 hash, set, sorted set에 저장된 아이템 중 랜덤한 아이템을 추출할 수 있다.
        SRANDMEMBER, ZRANDMEMBER 커맨드는 COUNT 옵션 사용 가능, WITHSCORE 옵션을 사용하면 필드에 연결된 값도 함께 반환

    > HRANDFIELD user:hash
    "Id:4615"
    > HRANDFIELD user:hash 1 WITHVALUES // WITHVALUES 키에 연결된 값도 함께 반환
    1) "Id:4615"
    2) "Jinnji"

    > HRANDFIELD user:hash 2 // 중복되지 않는 랜덤한 키 2개 반환 ** count 옵션
    > HRANDFIELD user:hash -2 // 중복되는 랜덤한 키 2개 반환 ** count 옵션


 * 카운팅 방법
    댓글을 기준으로 예시를 들면 댓글 id를 기준으로 set을 생성한 뒤, 좋아요를 누른 유저의 id를 set에 저장하면 중복 없이
    데이터를 저장할 수 있다.

    > SADD comment-like:12554 967
    (integer) 1
    > SADD comment-like:12554 969
    (integer) 1
    > SADD comment-like:12554 969
    (integer) 0
    > SADD comment-like:12554 922
    (integer) 1
    > SCARD comment-like:12554
    (integer) 3

    읽지 않은 메시지 수 카운팅하기
    > SADD comment-like:12554 967
    (integer) 1
    > SADD comment-like:12554 969
    (integer) 1
    > HINCRBY user:234 channel:4243 1
    (integer) 2
    > HINCRBY user:234 channel:4243 1
    (integer) 3
    > HINCRBY user:234 channel:4243 -1
    (integer) 2

 * 비트맵을 이용한 DAU(daily active user 일일 방문자) 구하기
    uv:20221106 -> [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0]
    2022년 11월 6일 방문한 유저 id를 구하기 위해서는 키가 uv:20221106인 데이터를 만든 뒤 접속한 유저 id의 bit를 1로 설정하면 된다.
    id가 14인 유저가 접근했을 때에는 다음과 같이 오프셋 14를 1로 설정해준다.

    > SETBIT uv:20221106 14 1
    (integer) 0
    > BITCOUNT uv:20221106
    (integer) 1
    > SETBIT uv:20221106 10000 1
    (integer) 0
    > BITCOUNT uv:20221106
    (integer) 2

    비트맵에서 BITOP 커맨드를 사용하면 AND, OR, XOR, NOT 연산을 할 수 있으며, 레디스 서버에서 바로 계산된 결과를 가져올 수 있어 개별
    비트를 가져와 서버에서 처리하는 번거로움을 줄여줄 수 있다.

    uv:20221106 -> [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0]
    uv:20221107 -> [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
    uv:20221108 -> [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]

    > BITOP AND uv:202211 uv:20221106 uv:20221107 uv:20221108 // AND 연산으로 연속 접속자를 추릴수 있다 이렇게 되면 3번, 14번 오프셋이 연속 접속자이므로 2가 반환
    (integer) 2

    > GET uv:202211
    "\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\"

    비트맵은 사실상 string 자료 구조로 저장되기 때문에 GET 커맨드를 사용해 저장된 데이터를 확인할 수 있다.

    ** 비트맵이 set보다 DAU를 구하기 적합한 이유
        DAU(Daily Active Users)를 구할 때 Redis의 비트맵(Bitmap)을 사용하는 것이 성능상 이점이 있는 주된 이유는 메모리 효율성과 연산 속도 때문입니다. 비트맵과 셋(Set)을 이용한 접근 방식을 비교해보면,
        왜 비트맵이 특정 상황에서 더 유리한지 이해할 수 있습니다.

        메모리 효율성
            비트맵: 비트맵은 각 비트를 사용하여 사용자의 활동 상태를 나타냅니다. 예를 들어, 특정 사용자 ID가 해당 날짜에 활동했다면 해당 ID에 해당하는 위치의 비트를 1로 설정합니다. 이 방식은 매우 메모리 효율적입니다.
            예를 들어, 1,000,000명의 사용자가 있을 경우, DAU를 추적하기 위해 필요한 메모리는 대략 1,000,000비트, 즉 약 125KB 정도입니다.
            셋(Set): 셋을 사용하여 각 사용자 ID를 저장할 경우, 각 사용자 ID당 메모리 사용량이 훨씬 더 많습니다. 사용자 ID가 문자열이라고 가정하면, 각 ID는 메모리에서 더 많은 공간을 차지합니다.
            따라서, 동일한 수의 사용자 ID를 저장하기 위해 비트맵보다 훨씬 더 많은 메모리가 필요합니다.
        연산 속도
            비트맵: Redis의 비트맵 연산은 CPU에서 매우 빠르게 수행될 수 있습니다. 예를 들어, 특정 날짜의 전체 DAU를 계산하기 위해 비트맵에서 1로 설정된 비트의 수를 세는 BITCOUNT 연산은 매우 빠릅니다.
            셋(Set): 셋을 사용할 경우, DAU를 계산하기 위해서는 셋에 저장된 모든 요소를 순회하거나 셋의 크기를 직접 조회해야 합니다. 이는 비트맵을 사용할 때보다 더 많은 CPU 시간을 소모할 수 있습니다.
        유연성
            비트맵은 사용자 활동을 날짜별로 효율적으로 추적할 수 있게 해주며, BITOP 연산을 사용하여 여러 날짜에 걸친 사용자 활동의 합집합, 교집합 등을 매우 빠르게 계산할 수 있습니다. 이는 시간에 따른 사용자 활동 패턴 분석에 유용합니다.

    * hyperloglog를 사용한 사용자별 API 호출 로그 카운팅
        ** 다음 조건을 만족한다면 레디스의 hyperloglog를 사용하는 것을 고려해볼 수 있다.
            - 집합 내의 유일한 데이터의 개수를 카운팅해야 한다.
            - 1% 미만의 오차는 허용 가능하다.
            - 카운팅할 때 사용한 정확한 데이터를 다시 확인하지 않아도 된다.

        > PFADD 202211:user:245 "/api/v1/ddd"
        (integer) 1
        > PFADD 202211:user:245 "/api/v1/ddd"
        (integer) 0
        > PFADD 202211:user:245 "/api/v1/fff"
        (integer) 1
        > PFADD 202211:user:245 "/api/v1/ggg"
        (integer) 1
        > PFADD 202211:user:245 "/api/v1/ggg"
        (integer) 0
        > PFADD 202211:user:245 "/api/v1/ggg"
        (integer) 0
        > PFADD 202211:user:245 "/api/v1/dfdfdf"
        (integer) 1
        > PFCOUNT 202211:user:245
        (integer) 4

        hyperloglog는 set과 비슷하지만 저장되는 용량은 12KB로 고정되기 때문에 공간을 굉장히 효율적으로 사용할 수 있다는 장점을 갖고 있다.

        PFMERGE 커맨드를 이용하면 여러 개의 hyperloglog를 합칠 수 있으므로 분기별 또는 연도별 합산데이터를 간편하게 계산할 수 있다.

        > PFADD 202212:user:245 "/api/v1/ggg"
        (integer) 1
        > PFADD 202212:user:245 "/api/v1/g"
        (integer) 1
        > PFMERGE 2022:user:245 202211:user:245 202212:user:245
        OK
        > PFCOUNT 2022:user:245
        (integer) 5

* 레디스에서 위치 데이터
    레디스는 geo 자료 구조를 통해 공간 정보 데이터를 처리할 수 있다. 다른 자료 구조와 마찬가지로 모든 데이터는 메모리에 저장되며, 공간데이터를
    활용한 연산 역시 메모리에서 빠르게 계산될 수 있어서 다른 저장소보다 위치 데이터를 활용한 연산 역시 메모리에서 빠르게 계산될 수 있어서 다른 저장소보다
    위치 데이터를 자율적으로 처리할 수 있다는 장점을 갖고 있다. 관계형 데이터베이스를 이용해 위치 데이터를 처리할 때는 데이터를 단순히 저장할 뿐이며,
    실제 데이터 가공 및 처리과정은 저장소 외부에서 이뤄져야 한다. 그러나 레디스를 활용하면 데이터 저장뿐만 아니라 실시간 위치 연산을 직접 수행할 수 있어
    데이터 이동으로 인한 네트워크 트래픽을 감소시키고 애플리케이션 코드의 복잡성을 감소시킬 수 있으므로 빠른 서비스 응답 속도를 보장한다.

    ** geo set
        geo set은 위치 공간 관리에 특화된 데이터 구조로, 각 위치 데이터는 경도와 위도의 쌍으로 저장된다. 이 데이터는 내부적으로 sorted set 구조로 저장된다.

        > GEOADD user 50.0714628 14.4144964 142
        (integer) 1


        > GEOADD restaurant 50.0714628 14.4144964 ukalendu
        (integer) 1
        > GEOPOS restaurant ukalendu
        1) 1) "50.07146447896957397"
           2) "14.41449664654903273"

        > GEOSEARCH restaurant fromlonlat 50.0682458 14.4181846 byradius 1 km // 위 에서 검색된 경도, 위도 값 기준으로 GEOSEARCH 커맨드로 검색하면 1km 반경 데이터 찾기 가능
        1) "ukalendu"

        BYRADIUS 옵션은 사용자가 지정한 빈지름 값을 기준으로 해당 위치에서 그 반지름만큼 떨어진 범위 내의 데이터를 검색한다.
        반면 BYBOX 옵션은 width, height 값을 추가로 지정함으로써, 특정 위치를 중심으로 한 직사각형 영역 내의 장소들을 검색할 수 있다.







