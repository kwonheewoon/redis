* 키의 자동 생성과 삭제
    stream이나 set, sorted set, hash와 같이 하나의 키가 여러 개의 아이템을 가지고 있는 자료 구조에서는
    명시적으로 키를 생성하거나 삭제하지 않아도 키는 알아서 생성되고 삭제된다. 키의 생성과 삭제는 세 가지 공통적인 규칙을 따른다

    1.키가 존재하지 않을 때 아이템을 넣으면 아이템을 삽입하기 전에 빈 자료 구조를 생성
        > DEL mylist
        (integer) 1
        > LPUSH mylist 1 2 3
        (integer) 3
        > LRANGE mylist 0 -1
        1) "3"
        2) "2"
        3) "1"

        키가 존재하지 않을 때 LPUSH 커맨드를 사용해 데이터를 입력하면 명시적으로 키를 생성하는 작업을 하지 않아도 mylist라는 이름의
        list 자료 구조가 생성된다

        저장하고자 하는 키에 다른 자료 구조가 이미 생성돼 있을 때 아이템을 추가하는 작업은 에러를 반환

        > SET hello world
        OK
        > LPUSH hello 1 2 3
        (error) WRONGTYPE Operation against a key holding the wrong kind of value
        > TYPE hello
        string

    2.모든 아이템을 삭제하면 카도 자동으로 삭제된다
        > LPUSH mylist 1 2 3
        (integer) 6
        > EXISTS mylist
        (integer) 1
        > LPOP mylist
        "3"
        > LPOP mylist
        "2"
        > LPOP mylist
        "1"
        > EXISTS mylist
        (integer) 0

    3.키가 없는 상태에서 키 삭제, 아이템 삭제, 자료 구조 크가 조회 같은 읽기 전용 커맨드를 수행하면
    에러를 반환하는 대신 키가 있으나 아이템이 없는 것처럼 동작
        > EXISTS mylist
        (integer) 0
        > DEL mylist
        (integer) 0
        > LLEN mylist
        (integer) 0
        > LPOP mylist
        (nil)


* KEYS
    KEYS pattern

    KEYS 커맨드는 레디스에 저장된 모든 키를 조회하는 커맨드다. 매칭되는 패턴에 해당하는 모든 키의 list를 반환
    패턴은 글롭 패턴 스타일로 동작
    - h?llo에는 hello, hallo가 매칭될 수 있다
    - h*llo에는 hllo, heeeello가 매칭될 수 있다
    - h[ae]llo에는 hello, hallo가 매칭될 수 있지만 hillo는 매칭되지 않는다.
    - h[^e]llo에는 hallo, hbllo가 매칭될 수 있지만 hello는 매칭되지 않는다.
    - h[a-b]llo에는 hallo, hbllo만 매칭될 수 있다

    ** KEYS는 위험한 커맨드다
    레디스에 100만개의 키가 저장돼 있다면 모든 키의 정보를 반환한다 레디스 싱글 스레드로 동작하기 때문에 실행 시간이 오래 걸리는 커맨드를
    수행하는 동안 다른 클라이언트에서 들어오는 다른 모든 커맨드는 차단된다.

* SCAN
    SCAN cursor [MATCH pattern] [COUNT count] [TYPE type]

    SCAN KEYS를 대체해 키를 조회할 때 사용할 수 있는 커맨드다. KEYS는 한 번에 모든 키를 반환하는 커맨드로 잘못 사용하면 문제가 발생할 수 있지만
    SCAN 커맨드는 커서를 기반으로 특정 범위의 키만 조회할 수 있기 때문에 비교적 안전하게 사용할 수 있다

    > SCAN 0
    1) "0" // 다음 SCAN 커맨드를 사용할 때 인수로 사용해야 하는 커서 위치 0의 의미는 모든 키를 반환했다는 것
    2) 1) "Product:123" // 저장된 키의 list
       2) "mybitmap"
       3) "myset"
       4) "members"
       5) "Product:234"
       6) "mySortedSet"
       7) "hello"
       8) "travel"
       9) "score:220817"

    기본적으로 한 번에 반환되는 키의 개수는 10개 정도이지만 COUNT 옵션으로 조정 가능
    하지만 데이터는 지정한 개수만큼 출력되지는 않는데 레디스는 메모리를 스캔하며 데이터가 저장된 형상에 따라 몇 개의 키를 더 읽는 것이 효율적이라고 판단되면
    1 ~ 2개의키를 더 읽은 뒤 함께 반환하기도 한다

    SCAN 커맨드와 MATCH 옵션을 이용해 키 값을 조회할 때에는 한 번에 패턴에 매칭된 여러 개의 키 값이 반환되지 않는다. 적은 수의 결과가 반환되거나
    혹은 빈 값이 반환될 수 있다

    SCAN 커맨드에서 MATCH 옵션을 사용할 때에는 우선 데이터를 필터링 없이 스캔한 다음 데이터를 반환하기 직전에 필터링하는 방식으로 동작하기 때문

    TYPE 옵션을 이용하면 지정한 타입의 키만 조회할 수 있다. 이 또한 위의 MATCH 옵션 처럼 사용자에게 반환되기 전에 필터되는 방식으로 동작하기 때문에
    원하는 타입을 조죄하기까지 오래 걸릴 수 있다.

    > SCAN 0 TYPE zset
    1) "0"
    2) 1) "mySortedSet"
       2) "travel"
       3) "score:220817"

* SORT
    list, set, sorted set 에서만 사용할 수 있는 커맨드로, 키 내부의 아이템을 정렬해 반환한다.
    LIMIT 옵션을 사용하면 일부 데이터만 조회할 수 있으며, ASC/DESC 옵셤을 사용하면 정렬 순서를 변경할 수 있다.
    정렬할 대상이 문자열일 경우 ALPHA 옵션을 사용하면 데이터를 사전 순으로 정렬해 조회할 수 있다.

    > LPUSH mylist a
    (integer) 1
    > LPUSH mylist b
    (integer) 2
    > LPUSH mylist c
    (integer) 3
    > LPUSH mylist hello
    (integer) 4
    > SORT mylist
    (error) ERR One or more scores can't be converted into double
    > SORT mylist ALPHA
    1) "a"
    2) "b"
    3) "c"
    4) "hello"

    BY와 GET 옵션을 이용하면 정렬한 결과를 이용해 다른 키에 접근해서 데이터를 조회할 수 있다.

* RENAME / RENAMENX
    RENAME key newkey
    RENAMENX key newkey

    RENAME, RENAMEMX 커맨드 모두 키의 이름을 변경하는 커맨드다. 하지만 RENAMENX 커맨드는 오직 변경할 키가 존재하지 않을 때에만 동작한다.

    > SET a apple
    OK
    > SET b banana
    OK
    > RENAMENX a b
    (integer) 0
    > GET b
    "banana"

* COPY
    Source에 지정된 키를 destination 키에 복사한다. Destination에 지정한 키가 이미 있는 경우 에러가 반환되는데
    REPLACE 옵션을 사용하면 destination 키를 삭제한 뒤 값을 복사하기 때문에 에러가 발생하지 않는다.

    COPY source destination [DB destination-db] [REPLAE]

    > SET B BANANA
    OK
    > COPY B BB
    (integer) 1
    > GET B
    "BANANA"
    > GET BB
    "BANANA"

* TYPE
    TYPE key
    지정한 키의 자료 구조 타입을 반환한다.

* OBJECT
    OBJECT <subcommand> [<arg> [value] [opt] ...]

    키에 대한 상세 정보를 반환한다. 사용할 수 있는 subcommand 옵션으로는 ENCODING, IDLETIME 등이 있으며 해당 키가 내부적으로 어떻게 저장됐는지,
    혹은 키가 호출되지 않은 시간이 얼마나 됐는지 등을 확인할 수 있다.

* 키의 삭제
    FLUSHALL [ASYNC | SYNC]

    레디스에 저장된 모든 키를 삭제한다. 기본적으로 FLUSHALL 커맨드는 SYNC한 방식으로 동작해 모든 데이터가 삭제된 경우에만 OK를 반환해서 커맨드가
    실행되는 도중에는 다른 응답을 처리할 수 없다. ASYNC 옵션을 사용하면 flush는 백그라운드 실행되고 커맨드가 수행됐을 때 존재했던 키만 삭제해서 flush
    되는 중 새로 생성된 키는 삭제되지 않는다.

    lazyfree-lazy-user-flush 옵션이 yes인 경우 ASYNC 옵션 없이 FLUSHALL 커맨드를 사용하더라도 백그라운드로 키 삭제 작업이 동작한다.
        버전 7 기준으로 해당 옵션의 기본값은 no 이다.

* DEL
    DEL KEY [key ...]
    키와 키에 저장된 모든 아이템을 삭제하는 커맨드다. 기본적으로 동기적으로 작동한다.

* UNLINK
    UNLINK key [key ...]
    DEL과 비슷하게 키와 데이터를 삭제하는 커맨드다. 하지만 이 커맨드는 백그라운드에서 다른 스레드에 의해 처리되며, 우선 키와 연결된 데이터의 연결을 끊는다.

    set, sorted set과 같이 하나의 키에 여러개의 아이템이 저장된 자료 구조의 경우 1개의 키를 삭제하는 DEL 커맨드를 수행하는 것은 레디스 인스턴스에
    영향을 끼칠 가능성이 존재한다. 100만 개의 아이템이 저장돼 있는 sorted set 키를 DEL 커맨드로 삭제하는 것은 저체 키가 100만 개 있는
    레디스에서 동기적인 방식으로 FLUSH ALL을 수행하는 것과 같고, 수행되는 시간동안 다른 클라이언트는 아무런 커맨드를 사용할 수 없다.
    따라서 키에 저장된 아이템이 많은 경우 DEL이 아니라 UNLINK를 사용해 데이터를 삭제하는 것이 좋다.

    lazyfree-lazy-user-del 옵션이 yes일 경우 모든 DEL 커맨드는 UNLINK로 동작해 백그라운드로 키를 삭제한다.
        버전 7 기준으로 해당 옵션의 기본값은 no 이다.

* EXPIRE
    EXPIRE key seconds [ NX | XX | GT | LT ]

    키가 만료될 시간을 초 단위로 정의할 수 있으며, 다음과 같은 옵션을 함께 사용할 수 있다.
    - NX : 해당 키에 만료 시간이 정의돼 있지 않을 경우에만 커맨드 수행
    - XX : 해당 키에 만료 시간이 정의돼 있을 때에만 커맨드 수행
    - GT : 현재 키가 가지고 있는 만료 시간보다 새로 입력한 초가 더 클 때에만 수행
    - LT : 현재 키가 가지고 있는 만료 시간보다 새로 입력한 초가 더 작을 때에만 수행

* EXPIREAT
    EXPIREAT key unix-time-seconds [ NX | XX | GT | LT ]
    키가 특정 유닉스 타임스탬프에 만료될 수 있도록 키의 만료 시간을 직접 지정한다.
    사용할 수 있는 옵션은 EXPIRE와 동일

* EXPIRETIME
    EXPIRETIME key
    키가 삭제되는 유닉스 타임스탬프를 초 단위로 반환한다. 키가 존재하지만 만료 시간이 설정돼 있지 않은 경우에는 -1을, 키가 없을 때에는 -2를 반환한다.

* TTL
    TTL key
    키가 몇 초 뒤에 만료되는지 반환한다. 키가 존재하지만 만료 시간이 설정돼 있지 않은 경우에는 -1을, 키가 없을 때에는 -2을 반환한다.

** PEXPIRE, PEXPIREAT, PEXPIRETIME, PTTL은 밀리초 단위로 계산된다는 점만 다르며
    EXPIRE, EXPIREAT, EXPIRETIME과 동일하게 동작